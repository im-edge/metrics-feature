#!/usr/bin/php
<?php

use GetOpt\ArgumentException;
use GetOpt\GetOpt;
use GetOpt\Operand;
use IcingaMetrics\CiUpdateHandler;
use IcingaMetrics\DataNode;
use IcingaMetrics\Db\ZfDbConnectionFactory;
use IcingaMetrics\DbInventory;
use IcingaMetrics\MetricStore;
use IcingaMetrics\RedisPerfDataApi;
use React\EventLoop\Loop;

require_once dirname(__DIR__) . '/vendor/autoload.php';
error_reporting(E_ALL | E_STRICT);

$options = new GetOpt(null, [GetOpt::SETTING_STRICT_OPERANDS => true]);
$options->addOperand(Operand::create('directory', Operand::REQUIRED));
$options->addOperand(Operand::create('store', Operand::REQUIRED));
try {
    $options->process();
} catch (ArgumentException $e) {
    echo $options->getHelpText();
    exit(1);
}

$logger = include __DIR__ . '/logger.inc.php';
$db = ZfDbConnectionFactory::connection(include __DIR__ . '/dbconfig.inc.php');
$dbInventory = new DbInventory($db, $logger);

$dataNode = new DataNode($options->getOperand('directory'), $logger);
$dataNode->run();
$dbInventory->registerDataNode($dataNode);

$metrics = new MetricStore($options->getOperand('store'), $logger);
$metrics->requireBeingConfigured();
$dataNode->claimMetricStore($metrics);
$dbInventory->registerMetricsStore($metrics);

Loop::futureTick(function () use ($dbInventory, $metrics, $logger) {
    $redis = new RedisPerfDataApi($logger, $metrics->getRedisSocketUri());
    $redis->setClientName('IcingaMetrics::ciUpdates');
    $handler = new CiUpdateHandler($dbInventory, $redis, $metrics->getUuid(), $logger);
    $handler->run();
});
Loop::run();
